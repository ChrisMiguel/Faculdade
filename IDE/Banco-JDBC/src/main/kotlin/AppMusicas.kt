import org.apache.commons.dbcp2.BasicDataSource
import org.springframework.jdbc.core.BeanPropertyRowMapper
import org.springframework.jdbc.core.JdbcTemplate
import javax.swing.JOptionPane

fun main(): String {

for (m in 1..2){
    val Musica2 = Musica()
    Musica2.interprete = JOptionPane.showInputDialog("Qual o intérprete?")
    Musica2.acessosSpotify = JOptionPane.showInputDialog("Quantos acessos tem o spotify?").toInt()

    JOptionPane.showMessageDialog(null,"A música cantada por ${Musica2.interprete} teve ${Musica2.acessosSpotify} no Spotify")

val encerrado = JOptionPane.showInputDialog("O acesso ao spotify foi encerrado? Digite 1 para sim ou qualquer outra coisa para não").toString()

    Musica2.acessoEncerrado = encerrado=="1"
    val dataSource = BasicDataSource()

    //Drivers
    //Dados da conexão com o banco
    dataSource.driverClassName = "org.h2.Driver"
    //Como chegar ao banco de dados
    //Neste exemplo, usamos o banco de memória
    dataSource.url = "jdbc:h2:mem:sptech"
    //Login por padrão é 'sa'
    dataSource.username = "sa"
    //Senha
    dataSource.password = ""

    val jdbcTemplate = JdbcTemplate(dataSource)

    //aqui pedimos para executar uma instrução SQL
    jdbcTemplate.execute("" +
            "create table musica(" +
            "id INT GENERATED BY DEFAULTS AS IDENTIFY primary key," +
            "interprete varchar(20) not null" +
            "acessosSpotify Int not null" +
            "acessosEncerrado boolean not null" +
            ")")

    //Aqui usamos o "update(), que executa uma instrução SQL
    //DML -> Insert, delete ou update
    //Ao se executado, ele retorna um número inteiro
    //Que é quantas linhas do banco foram usadas
    val linhasAfetadas= jdbcTemplate.update("" +
            "insert into musica (interprete, acessosSpotify, acessoEncerrado) values " +
            "(${Musica2.interprete}, ${Musica2.acessosSpotify} ${Musica2.acessoEncerrado}}), (2, 'Lipert'), (3, 'Navarro')")
    println("$linhasAfetadas linhas inseridas")

    //queryForList executa uma consulta (select)
    //o resultado é uma lista de objetos
    val musicas = jdbcTemplate.queryForList("select * from musica")
    println(musicas)

    //query() executa uma consulta (select)
    //O resultado é mapeado numa lista de objetos
    val listaMusicas:List<Musica> = jdbcTemplate.query("select * from musica", BeanPropertyRowMapper(Musica::class.java)
    )

    listaMusicas.forEach {
        println("Música ${it.id} - ${it.interprete}")
    }*/
}